generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model menu {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(255)
  price         Int
  restaurant_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guest_id         String     @db.Uuid
  restaurant_id    String     @db.Uuid
  table_number     Int
  reservation_time DateTime   @db.Timestamp(6)
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  user             user       @relation(fields: [guest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id                                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description                         String?       @db.VarChar(255)
  image                               String?       @db.VarChar(255)
  name                                String        @db.VarChar(255)
  created_at                          DateTime      @default(now()) @db.Timestamp(6)
  updated_at                          DateTime      @default(now()) @db.Timestamp(6)
  user_id                             String        @db.Uuid
  tenant_id                           String        @db.VarChar(255)
  menu                                menu[]
  reservation                         reservation[]
  user_restaurant_user_idTouser       user          @relation("restaurant_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_user_restaurant_idTorestaurant user[]        @relation("user_restaurant_idTorestaurant")
}

model user {
  id                                        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                     String        @unique @db.VarChar(255)
  firstName                                 String?       @db.VarChar(255)
  lastName                                  String?       @db.VarChar(255)
  roq_user_id                               String        @db.VarChar(255)
  tenant_id                                 String        @db.VarChar(255)
  created_at                                DateTime      @default(now()) @db.Timestamp(6)
  updated_at                                DateTime      @default(now()) @db.Timestamp(6)
  restaurant_id                             String?       @db.Uuid
  reservation                               reservation[]
  restaurant_restaurant_user_idTouser       restaurant[]  @relation("restaurant_user_idTouser")
  restaurant_user_restaurant_idTorestaurant restaurant?   @relation("user_restaurant_idTorestaurant", fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
